# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from predicet import *
from camera_examine import *
from get_train_data import QT_predicer_data
import os

config_camera = {
    'camera1': {
        'url': 'rtsp://192.168.5.36/chan1/main/av_stream',
        'test_path': r'C:\Users\NailinLiao\PycharmProjects\CameraStatusCheck\save_path\test\camera1',
        'center_cut': [970, 791],
        'check_point': [[230, 17], [162, 43], [71, 77], [34, 90]],  # [ [checke_pont x,y] X4 ]
    },
    'camera2': {
        'url': 'rtsp://192.168.5.36/chan2/main/av_stream',
        'test_path': r'C:\Users\NailinLiao\PycharmProjects\CameraStatusCheck\save_path\test\camera2',
        'center_cut': [961, 844],
        'check_point': [[213, 10], [133, 42], [68, 67], [24, 58]],  # [ [checke_pont x,y] X4 ]
    },
    'camera3': {
        'url': 'rtsp://192.168.5.36/chan3/main/av_stream',
        'test_path': r'C:\Users\NailinLiao\PycharmProjects\CameraStatusCheck\save_path\test\camera3',
        'center_cut': [909, 888],
        'check_point': [[242, 50], [179, 72], [114, 96], [43, 123]],  # [ [checke_pont x,y] X4 ]
    },
}


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(638, 245)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 20, 112, 34))
        self.pushButton.setObjectName("pushButton")

        self.pushButton.clicked.connect(self.loadmp4)

        # self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineEdit.setGeometry(QtCore.QRect(30, 80, 111, 25))
        # self.lineEdit.setObjectName("lineEdit")

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(160, 10, 421, 51))
        self.textEdit.setObjectName("textEdit")
        # self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        # self.textEdit_2.setGeometry(QtCore.QRect(160, 70, 421, 51))
        # self.textEdit_2.setObjectName("textEdit_2")
        # self.textEdit_2.setText('输入锚点格式参照[[x1,y1],[x2,y2]......]')

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(460, 150, 112, 34))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.run_model)

        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(320, 150, 105, 22))
        self.checkBox.setObjectName("checkBox")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(180, 150, 99, 24))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "相机姿态检查"))
        self.pushButton.setText(_translate("MainWindow", "选择mp4文件"))
        # self.lineEdit.setText(_translate("MainWindow", "     锚点"))
        self.pushButton_2.setText(_translate("MainWindow", "开始姿态检查"))
        self.checkBox.setText(_translate("MainWindow", "查看实时结果"))
        self.comboBox.setItemText(0, _translate("MainWindow", "camera1"))
        self.comboBox.setItemText(1, _translate("MainWindow", "camera2"))
        self.comboBox.setItemText(2, _translate("MainWindow", "camera3"))

    def loadmp4(self):
        fname, _ = QFileDialog.getOpenFileName(self, '选则文件夹', '.', '视频文件(*.MP4)')
        self.textEdit.setText(fname)
        # self.imageLabel.setPixmap(QPixmap(fname))

    def show_message(self, data):
        QMessageBox.information(self, "检测结果", data,
                                QMessageBox.Yes)  # 最后的Yes表示弹框的按钮显示为Yes，默认按钮显示为OK,不填QMessageBox.Yes即为默认

    def run_model(self):
        key = self.comboBox.currentText()

        video_path = self.textEdit.toPlainText()

        debug = self.checkBox.checkState()
        center_cut = config_camera[key]['center_cut']
        check_point = config_camera[key]['check_point']
        model_path = r'C:\Users\NailinLiao\PycharmProjects\CameraStatusCheck\model_pth\Unet_epoch_500_batchsize_32.pth'
        ts = datetime.datetime.now().timestamp()
        save_run_tima = os.path.join('exp', str(ts))

        img_list = QT_predicer_data(video_path, save_run_tima, center_cut, size=256)

        statu = QT_predicet(model_path, img_list, check_point, debug=debug)
        if statu:
            data = '检测通过'
        else:
            data = '检测不通过'
        self.show_message(data)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    main = Ui_MainWindow()
    main.show()
    sys.exit(app.exec_())
